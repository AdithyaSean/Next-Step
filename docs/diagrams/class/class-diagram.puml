@startuml Next Step Class Diagram

' Diagram styling
skinparam classAttributeIconSize 0
hide class circle
hide abstract circle
skinparam monochrome true
skinparam shadowing false
skinparam linetype ortho
skinparam class {
    BackgroundColor White
    BorderColor Black
    FontSize 14
    FontStyle Normal
    FontName Arial
    
    AttributeFontSize 12
    AttributeFontColor Black
    AttributeFontName Arial
    AttributeFontStyle Normal
    
    StereotypeFontSize 12
    StereotypeFontColor Black
    StereotypeFontName Arial
    StereotypeFontStyle Italic
    
    ArrowFontSize 16
    ArrowFontName Arial
    ArrowFontStyle Normal
    BorderThickness 2
    ArrowThickness 2
}

' Base User class
abstract class User {
    #UUID id
    #String name
    #String email
    #String password
    #String role
    +UUID getId()
    +String getName()
    +String getEmail()
    +String getRole()
    +void setName(String name)
    +void setEmail(String email)
    +void setPassword(String password)
    +void setRole(String role)
    +boolean validatePassword(String inputPassword)
}

' Student entity
class Student {
    -String contact
    -String school
    -String district
    -String stream
    -Double zScore
    -OLResults olResults
    -ALResults alResults
    -String university
    -String course
    -Double gpa
    -StudentProfile profile
    -List<CareerPrediction> predictions
    +OLResults getOLResults()
    +ALResults getALResults()
    +Double getZScore()
    +StudentProfile getProfile()
    +List<CareerPrediction> getPredictions()
    +void addPrediction(CareerPrediction prediction)
}

' StudentProfile aggregation
class StudentProfile {
    -List<String> interests
    -List<String> skills
    -List<String> strengths
    +void addInterest(String interest)
    +void addSkill(String skill)
    +void addStrength(String strength)
    +List<String> getInterests()
    +List<String> getSkills()
    +List<String> getStrengths()
}

' OLResults aggregation
class OLResults {
    -Map<String, String> results
    +void addResult(String subject, String grade)
    +void removeResult(String subject)
    +Map<String, String> getResults()
    +boolean validateResults(Map<String, String> results)
}

' ALResults aggregation
class ALResults {
    -Map<String, String> results
    +void addResult(String subject, String grade)
    +void removeResult(String subject)
    +Map<String, String> getResults()
    +boolean validateResults(Map<String, String> results)
}

' Institution entity
class Institution {
    -String type
    -String website
    -String location
    -ContactInfo contactInfo
    -List<Course> courses
    +List<Course> getCourses()
    +String getType()
    +ContactInfo getContactInfo()
    +void addCourse(Course course)
    +void removeCourse(Course course)
}

' Course entity
class Course {
    -UUID id
    -String name
    -String description
    -String duration
    -MinimumGrades minimumGrades
    -Double minimumZScore
    -List<Institution> offeredBy
    -RelatedCareers relatedCareers
    +Double getMinimumZScore()
    +List<Institution> getOfferedBy()
    +MinimumGrades getMinimumGrades()
    +RelatedCareers getRelatedCareers()
    +void addInstitution(Institution institution)
    +void removeInstitution(Institution institution)
}

' MinimumGrades aggregation
class MinimumGrades {
    -Map<String, String> grades
    +void addGrade(String subject, String grade)
    +void removeGrade(String subject)
    +Map<String, String> getGrades()
    +boolean validateGrades(Map<String, String> grades)
}

' RelatedCareers aggregation
class RelatedCareers {
    -List<String> careers
    +void addCareer(String career)
    +void removeCareer(String career)
    +List<String> getCareers()
}

' Career entity
class Career {
    -String code
    -String title
    -String description
    -String category
    -RequiredSkills requiredSkills
    -RelatedCourses relatedCourses
    -ExternalLinks externalLinks
    +String getCode()
    +RequiredSkills getRequiredSkills()
    +RelatedCourses getRelatedCourses()
    +ExternalLinks getExternalLinks()
}

' RequiredSkills aggregation
class RequiredSkills {
    -List<String> skills
    +void addSkill(String skill)
    +void removeSkill(String skill)
    +List<String> getSkills()
}

' RelatedCourses aggregation
class RelatedCourses {
    -List<String> courses
    +void addCourse(String course)
    +void removeCourse(String course)
    +List<String> getCourses()
}

' ExternalLinks aggregation
class ExternalLinks {
    -Map<String, String> links
    +void addLink(String name, String url)
    +void removeLink(String name)
    +Map<String, String> getLinks()
    +boolean validateLinks(Map<String, String> links)
}

' CareerPrediction value object
class CareerPrediction {
    -String careerPath
    -Double probability
    -LocalDateTime predictedAt
    +Double getProbability()
    +LocalDateTime getPredictedAt()
    +void setCareerPath(String careerPath)
    +void setProbability(Double probability)
    +boolean validateProbability(Double probability)
}

' Relationships
User <|-- Student
User <|-- Institution
Student "1" *-- "✱     " CareerPrediction
Student "1 " *-- "1" StudentProfile
Student "1" *-- "1" OLResults
Student "1" *-- "1" ALResults
Student "1" -- "    1" Institution : studies at
Student "1     " -- "✱" Career : ‎ interested in
Student "1" -- "✱ " Course : recommended
Institution "1" -- "✱" Course : offers
Institution "1" -- "✱" Career : relates to
Course "1     " -- "✱" Career : leads to
Course "1" *-- "1    " MinimumGrades
Course "1 " *-- "1" RelatedCareers
Career "1     " *-- "1" RequiredSkills
Career "1" *-- "1" RelatedCourses
Career "1" *-- "1      " ExternalLinks

@enduml
