@startuml Register Account Sequence

skinparam ParticipantPadding 20
skinparam BoxPadding 10
skinparam SequenceGroupBodyBackgroundColor transparent

actor User
participant "Frontend" as UI
participant AuthController
participant ValidationService
participant AuthService
participant UserRepository
participant EmailService

User -> UI: Fill registration form
activate UI

UI -> AuthController: POST /auth/register\n(name, email, password, role)
activate AuthController

AuthController -> ValidationService: validateInputData(requestDTO)
activate ValidationService

alt invalid input
    ValidationService --> AuthController: throw ValidationException
    AuthController --> UI: 400 Bad Request
    UI --> User: Show validation errors
else valid input
    ValidationService --> AuthController: success
    
    AuthController -> AuthService: registerUser(requestDTO)
    activate AuthService
    
    AuthService -> UserRepository: findByEmail(email)
    activate UserRepository
    
    alt email exists
        UserRepository --> AuthService: user
        AuthService --> AuthController: throw EmailExistsException
        AuthController --> UI: 409 Conflict
        UI --> User: Email already registered
    else email available
        UserRepository --> AuthService: null
        
        AuthService -> AuthService: hashPassword(password)
        AuthService -> UserRepository: save(newUser)
        UserRepository --> AuthService: savedUser
        
        AuthService -> EmailService: sendVerificationEmail(email)
        activate EmailService
        EmailService --> AuthService: success
        deactivate EmailService
        
        AuthService --> AuthController: userDTO
        deactivate AuthService
        
        AuthController --> UI: 201 Created
        UI --> User: Registration successful
    end
    
    deactivate UserRepository
end

deactivate ValidationService
deactivate AuthController
deactivate UI

@enduml